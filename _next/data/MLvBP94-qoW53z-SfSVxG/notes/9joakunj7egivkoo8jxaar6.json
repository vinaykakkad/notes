{"pageProps":{"note":{"id":"9joakunj7egivkoo8jxaar6","title":"Adders","desc":"","updated":1671598361564,"created":1671598359660,"custom":{},"fname":"acads.sem-7.aca.adders","type":"note","vault":{"fsPath":"vault"},"contentHash":"10f563cc457b36a5b3c75dea7aef153d","links":[],"anchors":{"abbreviations":{"type":"header","text":"Abbreviations","value":"abbreviations","line":38,"column":0,"depth":1},"lecture-5":{"type":"header","text":"Lecture 5","value":"lecture-5","line":48,"column":0,"depth":1},"full-adders-vs-half-adders":{"type":"header","text":"Full Adders vs Half Adders","value":"full-adders-vs-half-adders","line":50,"column":0,"depth":1},"full-adder-with-gpk":{"type":"header","text":"Full adder with GPK","value":"full-adder-with-gpk","line":60,"column":0,"depth":1},"full-adder-implementations":{"type":"header","text":"Full Adder Implementations","value":"full-adder-implementations","line":72,"column":0,"depth":1},"ripple-carry-adder":{"type":"header","text":"Ripple Carry Adder","value":"ripple-carry-adder","line":88,"column":0,"depth":2},"using-generate-and-propagate":{"type":"header","text":"Using Generate and Propagate","value":"using-generate-and-propagate","line":101,"column":0,"depth":2},"expanding-equations-for-carry-out-carry-look-ahead-adders":{"type":"header","text":"Expanding equations for carry out (carry look ahead adders)","value":"expanding-equations-for-carry-out-carry-look-ahead-adders","line":110,"column":0,"depth":3},"what-impacts-the-delay-of-gates":{"type":"header","text":"What impacts the delay of GATES","value":"what-impacts-the-delay-of-gates","line":114,"column":0,"depth":1},"lecture-6":{"type":"header","text":"Lecture 6","value":"lecture-6","line":131,"column":0,"depth":1},"look-ahead-adder":{"type":"header","text":"Look-ahead adder","value":"look-ahead-adder","line":133,"column":0,"depth":2},"hierarchial-look-ahead-adder":{"type":"header","text":"Hierarchial look-ahead adder","value":"hierarchial-look-ahead-adder","line":142,"column":0,"depth":2},"think--revise-about":{"type":"header","text":"Think / Revise about","value":"think--revise-about","line":165,"column":0,"depth":2},"lecture-7-8":{"type":"header","text":"Lecture 7, 8","value":"lecture-7-8","line":171,"column":0,"depth":1},"carry-skip-adders":{"type":"header","text":"Carry Skip Adders","value":"carry-skip-adders","line":173,"column":0,"depth":2},"hierarchial-csa":{"type":"header","text":"Hierarchial CSA","value":"hierarchial-csa","line":185,"column":0,"depth":2},"carry-select-adders":{"type":"header","text":"Carry Select Adders","value":"carry-select-adders","line":198,"column":0,"depth":2},"conditional-sum-adder":{"type":"header","text":"Conditional Sum Adder","value":"conditional-sum-adder","line":217,"column":0,"depth":3},"lecture-9":{"type":"header","text":"Lecture 9","value":"lecture-9","line":225,"column":0,"depth":1},"bit-serial-adder":{"type":"header","text":"Bit Serial Adder","value":"bit-serial-adder","line":227,"column":0,"depth":2},"general-structure-for-adders-using-generate-and-propagate":{"type":"header","text":"General Structure for Adders using generate and propagate","value":"general-structure-for-adders-using-generate-and-propagate","line":239,"column":0,"depth":2},"list-of-multipliers":{"type":"header","text":"List of Multipliers","value":"list-of-multipliers","line":260,"column":0,"depth":1},"lecture-10-intro-csa":{"type":"header","text":"Lecture 10 (Intro CSA)","value":"lecture-10-intro-csa","line":270,"column":0,"depth":1},"lecture-11-csa-numerical--trick-for-signed-numbers":{"type":"header","text":"Lecture 11 (CSA Numerical && trick for signed numbers)","value":"lecture-11-csa-numerical--trick-for-signed-numbers","line":294,"column":0,"depth":1},"lecture-12-csa-signed-number-numerical--booth-re-coding":{"type":"header","text":"Lecture 12 (CSA Signed Number numerical & Booth re-coding)","value":"lecture-12-csa-signed-number-numerical--booth-re-coding","line":339,"column":0,"depth":1},"lecture-13-lsm-rsm-booth-example4-8-csa-signed":{"type":"header","text":"Lecture 13 (LSM, RSM, booth example(4, 8, CSA signed))","value":"lecture-13-lsm-rsm-booth-example4-8-csa-signed","line":384,"column":0,"depth":1},"lecture-14-baugh-wooley-multiplier--fixed-point-notation":{"type":"header","text":"Lecture 14 (Baugh Wooley Multiplier & fixed point notation)","value":"lecture-14-baugh-wooley-multiplier--fixed-point-notation","line":421,"column":0,"depth":1},"lecture-15":{"type":"header","text":"Lecture 15","value":"lecture-15","line":434,"column":0,"depth":1},"lecture-16":{"type":"header","text":"Lecture 16","value":"lecture-16","line":462,"column":0,"depth":1},"^i":{"type":"block","value":"i","line":279,"column":27}},"children":[],"parent":"kvnu5kew5wvkwmka2si2ftc","data":{}},"body":"<h1 id=\"adders\">Adders<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#adders\"></a></h1>\n<ul>\n<li><a href=\"#abbreviations\">Abbreviations</a></li>\n<li><a href=\"#lecture-5\">Lecture 5</a></li>\n<li><a href=\"#full-adders-vs-half-adders\">Full Adders vs Half Adders</a></li>\n<li><a href=\"#full-adder-with-gpk\">Full adder with GPK</a></li>\n<li><a href=\"#full-adder-implementations\">Full Adder Implementations</a>\n<ul>\n<li><a href=\"#ripple-carry-adder\">Ripple Carry Adder</a></li>\n<li><a href=\"#using-generate-and-propagate\">Using Generate and Propagate</a>\n<ul>\n<li><a href=\"#expanding-equations-for-carry-out-carry-look-ahead-adders\">Expanding equations for carry out (carry look ahead adders)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#what-impacts-the-delay-of-gates\">What impacts the delay of GATES</a></li>\n<li><a href=\"#lecture-6\">Lecture 6</a>\n<ul>\n<li><a href=\"#look-ahead-adder\">Look-ahead adder</a></li>\n<li><a href=\"#hierarchial-look-ahead-adder\">Hierarchial look-ahead adder</a></li>\n<li><a href=\"#think--revise-about\">Think / Revise about</a></li>\n</ul>\n</li>\n<li><a href=\"#lecture-7-8\">Lecture 7, 8</a>\n<ul>\n<li><a href=\"#carry-skip-adders\">Carry Skip Adders</a></li>\n<li><a href=\"#hierarchial-csa\">Hierarchial CSA</a></li>\n<li><a href=\"#carry-select-adders\">Carry Select Adders</a>\n<ul>\n<li><a href=\"#conditional-sum-adder\">Conditional Sum Adder</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#lecture-9\">Lecture 9</a>\n<ul>\n<li><a href=\"#bit-serial-adder\">Bit Serial Adder</a></li>\n<li><a href=\"#general-structure-for-adders-using-generate-and-propagate\">General Structure for Adders using generate and propagate</a></li>\n</ul>\n</li>\n<li><a href=\"#list-of-multipliers\">List of Multipliers</a></li>\n<li><a href=\"#lecture-10-intro-csa\">Lecture 10 (Intro CSA)</a></li>\n<li><a href=\"#lecture-11-csa-numerical--trick-for-signed-numbers\">Lecture 11 (CSA Numerical \\&#x26;\\&#x26; trick for signed numbers)</a></li>\n<li><a href=\"#lecture-12-csa-signed-number-numerical--booth-re-coding\">Lecture 12 (CSA Signed Number numerical \\&#x26; Booth re-coding)</a></li>\n<li><a href=\"#lecture-13-lsm-rsm-booth-example4-8-csa-signed\">Lecture 13 (LSM, RSM, booth example(4, 8, CSA signed))</a></li>\n<li><a href=\"#lecture-14-baugh-wooley-multiplier--fixed-point-notation\">Lecture 14 (Baugh Wooley Multiplier \\&#x26; fixed point notation)</a></li>\n<li><a href=\"#lecture-15\">Lecture 15</a></li>\n<li><a href=\"#lecture-16\">Lecture 16</a></li>\n</ul>\n<h1 id=\"abbreviations\">Abbreviations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#abbreviations\"></a></h1>\n<ul>\n<li>RCA (ripple carry adder)</li>\n<li>CLA (carry look-ahead adder)</li>\n<li>CSA (carry skip adders)</li>\n<li>CSA (carry select adders)</li>\n<li>BSA (bit serial adder)</li>\n<li>PTA (prefix tree adder)</li>\n<li>CSA (carry save adder)</li>\n</ul>\n<h1 id=\"lecture-5\">Lecture 5<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-5\"></a></h1>\n<h1 id=\"full-adders-vs-half-adders\">Full Adders vs Half Adders<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#full-adders-vs-half-adders\"></a></h1>\n<ul>\n<li>half adders\n<ul>\n<li><code>sum</code> = a <code>xor</code> b</li>\n<li><code>carry</code> = a * b</li>\n</ul>\n</li>\n<li>full adders\n<ul>\n<li><code>sum</code> = (a <code>xor</code> b) <code>xor</code> c</li>\n<li><code>carry</code> = ab + bc + ac = MAJ(a, b, c)\n<ul>\n<li>MAJ = majority gate</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"full-adder-with-gpk\">Full adder with GPK<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#full-adder-with-gpk\"></a></h1>\n<p><img src=\"/notes/assets/images/2022-11-22-11-26-40.png\"></p>\n<ul>\n<li>\n<p>g = generate (irrespective of C_in, C_out will be 1)</p>\n</li>\n<li>\n<p>p = propagate (C_out = C_in)</p>\n</li>\n<li>\n<p>k = kill (irrespective of C_in, C_out will be 0)</p>\n</li>\n<li>\n<p>equations</p>\n<ul>\n<li>g = a <code>and</code> b</li>\n<li>p = a <code>xor</code> b</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"full-adder-implementations\">Full Adder Implementations<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#full-adder-implementations\"></a></h1>\n<details>\n<summary>sum of products implementation (DNW)</summary>\n<p><img src=\"/notes/assets/images/2022-11-22-11-27-17.png\"></p>\n</details>\n<details>\n<summary>using half adders (DNW)</summary>\n<p><img src=\"/notes/assets/images/2022-11-22-11-27-39.png\"></p>\n</details>\n<h2 id=\"ripple-carry-adder\">Ripple Carry Adder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ripple-carry-adder\"></a></h2>\n<p><img src=\"/notes/assets/images/2022-11-22-11-28-03.png\"></p>\n<ul>\n<li>acts as subtractor when <code>m = 1</code>\n<ul>\n<li>xor gates give 1's complement of B</li>\n<li>M is also C_0, indirectly adds 1 => we get 2's complement of B</li>\n</ul>\n</li>\n<li>overflow\n<ul>\n<li>only check this when <code>a</code> and <code>b</code> are in `signed 2's representation', and both are +ve or -ve</li>\n<li>do not check in this case</li>\n</ul>\n</li>\n<li>carry flag\n<ul>\n<li>when <code>a</code> and <code>b</code> are <code>unsigned</code></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"using-generate-and-propagate\">Using Generate and Propagate<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#using-generate-and-propagate\"></a></h2>\n<ul>\n<li>substituting the values of P and G in equations of full adders\n<ul>\n<li><code>sum</code> = P <code>xor</code> C</li>\n<li><code>carry</code> = G + P * C\n<ul>\n<li>carry is one when\n<ul>\n<li>current stage is generate or</li>\n<li>current is propagate and incoming carry is one</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"expanding-equations-for-carry-out-carry-look-ahead-adders\">Expanding equations for carry out (carry look ahead adders)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#expanding-equations-for-carry-out-carry-look-ahead-adders\"></a></h3>\n<p><img src=\"/notes/assets/images/2022-11-22-11-28-37.png\"></p>\n<h1 id=\"what-impacts-the-delay-of-gates\">What impacts the delay of GATES<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-impacts-the-delay-of-gates\"></a></h1>\n<ul>\n<li>number of inputs</li>\n<li>fan-outs (how many times a output is used again)</li>\n<li>strength of gate (ignore)</li>\n<li>pattern of inputs</li>\n</ul>\n<details>\n<summary>glitchy behavior</summary>\n<p><img src=\"/notes/assets/images/2022-11-22-11-29-43.png\"></p>\n</details>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>derive RCA equation -> GPK equation</em></strong></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>multiple stage c_out equation</em></strong></li>\n</ul>\n<h1 id=\"lecture-6\">Lecture 6<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-6\"></a></h1>\n<h2 id=\"look-ahead-adder\">Look-ahead adder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#look-ahead-adder\"></a></h2>\n<ul>\n<li>we get <code>p</code> and <code>g</code> from <code>a</code> and <code>b</code> in one get delay</li>\n<li>and all the c_out can be obtained from <code>p</code> and <code>g</code> in two gate delay(<code>and</code> &#x26; <code>or</code>)</li>\n<li>finding <code>sum</code> will need another one-gate delay of <code>XOR</code>\n<ul>\n<li><strong>thus carry look-ahead is faster than ripple carry adder</strong></li>\n<li><strong>cost is additional circuits to figure out c_outs</strong></li>\n<li><strong>layers are roughly independent of the no. of bits we add</strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"hierarchial-look-ahead-adder\">Hierarchial look-ahead adder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hierarchial-look-ahead-adder\"></a></h2>\n<p><img src=\"/notes/assets/images/2022-11-23-11-21-50.png\"></p>\n<ul>\n<li>we make groups of 4 to add one more layer</li>\n<li>we do this to avoid using large gates</li>\n</ul>\n<details>\n<summary>equations</summary>\n<p><img src=\"/notes/assets/images/2022-11-23-11-22-19.png\"></p>\n<p><img src=\"/notes/assets/images/2022-11-23-11-22-41.png\"></p>\n</details>\n<details>\n<summary>3 level 64 bit adder</summary>\n<p><img src=\"/notes/assets/images/2022-11-23-11-23-14.png\"></p>\n</details>\n<h2 id=\"think--revise-about\">Think / Revise about<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#think--revise-about\"></a></h2>\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>is the block generating carry or <code>g</code>?</em></strong></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>how many instances of smaller blocks would be used?</em></strong></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>which carry / <code>g</code> is generated by which block?</em></strong></li>\n</ul>\n<h1 id=\"lecture-7-8\">Lecture 7, 8<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-7-8\"></a></h1>\n<h2 id=\"carry-skip-adders\">Carry Skip Adders<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#carry-skip-adders\"></a></h2>\n<details>\n<summary>simple CSA circuit</summary>\n<p><img src=\"/notes/assets/images/2022-11-23-10-58-23.png\"></p>\n</details>\n<ul>\n<li><strong><em>general strategy to speed-up is to figure out the carry faster</em></strong></li>\n<li>for any stage if propagate signal is set, we skip carry to next stage</li>\n</ul>\n<h2 id=\"hierarchial-csa\">Hierarchial CSA<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hierarchial-csa\"></a></h2>\n<details>\n<summary>circuit diagram</summary>\n<p><img src=\"/notes/assets/images/2022-11-23-10-51-25.png\"></p>\n</details>\n<ul>\n<li>for 32 bit CSA, we have 2 levels of skipping (8bit and 32 bit)</li>\n<li>for 128 bit CSA, we have 3 levels of skipping (8bit, 32bit and 128 bit)</li>\n<li><strong><em>if we are using RCA of <code>x</code> bit, maximum rippling would of size <code>2x</code></em></strong></li>\n</ul>\n<h2 id=\"carry-select-adders\">Carry Select Adders<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#carry-select-adders\"></a></h2>\n<ul>\n<li>we divide a higher order number into lower order groups</li>\n<li>normally, we would need c_in from groups on left to execute the RCA for groups on right</li>\n<li>in carry select adders, we find sum for both cases (cin = [0 | 1]) and select after the groups on left have completed</li>\n<li>for 8 bit num:\n<ul>\n<li>RCA would have delay of <code>8 FA</code>, requires <code>8 FA</code></li>\n<li>CSA would have delay of <code>4 FA</code>, requires <code>12 FA</code> + some <code>mux</code></li>\n</ul>\n</li>\n</ul>\n<details>\n<summary>circuit diagram</summary>\n<p><img src=\"/notes/assets/images/2022-11-23-11-07-23.png\"></p>\n</details>\n<ul>\n<li>each k bit adder can be implemented using 3 k/2 bit adders</li>\n<li><strong><em>main idea: all adders work in parallel, and the above idea can be used recursively</em></strong></li>\n</ul>\n<h3 id=\"conditional-sum-adder\">Conditional Sum Adder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#conditional-sum-adder\"></a></h3>\n<ul class=\"contains-task-list\">\n<li>\n<p>when we use 1 bit RCAs, the adder is known as conditional sum adder</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>workout one addition through circuit</em></strong></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>multiple stage c_out equation</em></strong></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>carry skip and conditional sum -- numerical <a href=\"https://drive.google.com/drive/u/1/folders/1XyUdKoB9A_qtemFwSmVRS0SI1lVFQP2v\">Examples</a></em></strong></p>\n</li>\n</ul>\n<h1 id=\"lecture-9\">Lecture 9<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-9\"></a></h1>\n<h2 id=\"bit-serial-adder\">Bit Serial Adder<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#bit-serial-adder\"></a></h2>\n<details>\n<summary>circuit</summary>\n<p><img src=\"/notes/assets/images/2022-11-23-11-53-34.png\"></p>\n</details>\n<ul>\n<li>n bit number, we only have a <code>FA</code> and a <code>FF</code></li>\n<li>we would need n cycle to find the answer</li>\n</ul>\n<h2 id=\"general-structure-for-adders-using-generate-and-propagate\">General Structure for Adders using generate and propagate<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#general-structure-for-adders-using-generate-and-propagate\"></a></h2>\n<p><img src=\"/notes/assets/images/2022-11-23-11-57-32.png\"></p>\n<ul>\n<li>we simplify the diagram in terms of prefix tree</li>\n</ul>\n<details>\n<summary>4 bit RCA as prefix tree </summary>\n<p><img src=\"/notes/assets/images/2022-11-23-12-01-06.png\"></p>\n</details>\n<p>brent kung</p>\n<ul class=\"contains-task-list\">\n<li>\n<p>3 types of boxes</p>\n</li>\n<li>\n<p>gray: 3 in -> 1 out</p>\n</li>\n<li>\n<p>black: 4 in -> 2 out</p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>given a diagram, write out some equations</em></strong></p>\n</li>\n</ul>\n<h1 id=\"list-of-multipliers\">List of Multipliers<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#list-of-multipliers\"></a></h1>\n<ul>\n<li>unsgined\n<ul>\n<li>left shift and right shift (serial multiplication)</li>\n</ul>\n</li>\n<li>singed operands\n<ul>\n<li>booth recoding (radix 2, 4, 8)</li>\n<li>baugh-wooley method</li>\n</ul>\n</li>\n<li>squareing\n<ul>\n<li>special case of multiplication</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-10-intro-csa\">Lecture 10 (Intro CSA)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-10-intro-csa\"></a></h1>\n<ul>\n<li>adding more than 2 nums\n<ul>\n<li>iteratively adding pairs of 2</li>\n<li>thinking about binary multiplication\n<ul>\n<li>column counting</li>\n<li>10 to 4 counter\n<ul>\n<li>10 -> 3 + 3 + 3 + 1 using 3 FA</li>\n<li>4, 3 -> 2, 2, 1 using 2 FA</li>\n<li><a aria-hidden=\"true\" class=\"block-anchor anchor-heading icon-link\" id=\"^i\" href=\"#^i\"></a>columns represent 2</li>\n<li>keep using full orders until every column has &#x3C; 3 elements</li>\n<li>3 dot -> use FA else HA</li>\n<li>finally use a ripply carry, GA</li>\n</ul>\n</li>\n<li>wallace and dada tree\n<ul>\n<li>at every stage we use 3 rows and FA and will 2 ans</li>\n<li>2 ans -> carry save adder</li>\n</ul>\n</li>\n<li>if the expression is of the form y = 2w + 4x + y + 3z\n<ul>\n<li>we just shift w by one column</li>\n<li>we shift x by 2 cols</li>\n<li>when we shift, size of number increases by one</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>advantage of CSA\n<ul>\n<li>from 7 * delay of RCA</li>\n<li>to 1 * delay of RCA + some delay of FA</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-11-csa-numerical--trick-for-signed-numbers\">Lecture 11 (CSA Numerical &#x26;&#x26; trick for signed numbers)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-11-csa-numerical--trick-for-signed-numbers\"></a></h1>\n<ul>\n<li>\n<p>formula for addition of n, x bit numbers</p>\n<ul>\n<li>x + log2(n) --> size of accumulator</li>\n<li>accumulator for  </li>\n</ul>\n</li>\n<li>\n<p>numerical</p>\n</li>\n<li>\n<p>understanding diag</p>\n<ul>\n<li>input 3 numbers from col (0 -> k - 1)\n<ul>\n<li>output\n<ul>\n<li>1 number from col (1 -> k) carry vector</li>\n<li>1 number from col (0 -> k - 1) sum vector</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>for making diag\n<ul>\n<li>do one numerical</li>\n<li>then do numerical</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>comparison with traditional method (iterative, time multiplexing)</p>\n</li>\n<li>\n<p>addition using binary tree of CPAs</p>\n<ul>\n<li>delay not very bad</li>\n<li>size of k (adders increase)</li>\n</ul>\n</li>\n<li>\n<p>signed numbers</p>\n<ul>\n<li>check msb\n<ul>\n<li>if 1 --> negative</li>\n<li>else positive</li>\n</ul>\n</li>\n<li>finding value\n<ul>\n<li>method 1\n<ul>\n<li>find 2's complement (1's complement + 1)</li>\n<li>add - sign</li>\n</ul>\n</li>\n<li>method 2\n<ul>\n<li>if msb is one treat is -1 * 2 ^ MSB</li>\n<li>add others simply</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>combination of columns with +/-  </p>\n</li>\n<li>\n<p>difference between squaring and multiplying</p>\n<ul>\n<li>multiplying is optimized for squaring</li>\n</ul>\n</li>\n<li>\n<p>signed numbers for csa</p>\n<ul>\n<li>extending signed numbers\n<ul>\n<li>copy the MSB to left side</li>\n</ul>\n</li>\n<li>in columns\n<ul>\n<li>flip the msb</li>\n<li>add -1 in the msb column</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-12-csa-signed-number-numerical--booth-re-coding\">Lecture 12 (CSA Signed Number numerical &#x26; Booth re-coding)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-12-csa-signed-number-numerical--booth-re-coding\"></a></h1>\n<ul>\n<li>\n<p>flip msb add -1 in that column</p>\n</li>\n<li>\n<p>to remove -1 -> shift -1 and add 1 in that column</p>\n</li>\n<li>\n<p>size of the -ve wala vector</p>\n</li>\n<li>\n<p>max size of single vector + log2(total number of vector)</p>\n</li>\n<li>\n<p>start</p>\n<ul>\n<li>based on the column of msb, figure out a new vector of size\n<ul>\n<li>calculating size\n<ul>\n<li>-3 * (2 ^ power of column) --> bits required to represent this</li>\n</ul>\n</li>\n<li>convert 3 -1s to a new vector\n<ul>\n<li>this vector is the signed representation of -3 * ...</li>\n</ul>\n</li>\n<li>add the flipped vectors and the -1 wala vector</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-text\"><code class=\"language-text\">- csa steps signed nos\n  - flip MSBs, combine -1s\n  - based on largest input and #input find size of -wala vector\n  - based on -wala size and sum of -1, find vector (signed rep of sum in -wala size)\n  - use sign extension to make every vector of equal bit\n\n- wherever possible reduce rows by moving ones from one row to empty\n</code></pre>\n<ul>\n<li>\n<p>multiplication</p>\n<ul>\n<li>done using multi operand addition</li>\n</ul>\n</li>\n<li>\n<p>optimizing multiplication -> square</p>\n</li>\n<li>\n<p>booth</p>\n<ul>\n<li>finding value of binary -> decimal\n<ul>\n<li>if we have burst of 1s (011110)\n<ul>\n<li>final value\n<ul>\n<li>= 2 ^ (4 + 1) - 2 ^ 1</li>\n<li>= 32 - 2</li>\n<li>= 30</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>booth re-coding (radix 2)\n<ul>\n<li>look at window of 2 nums\n<ul>\n<li>00 -> 0</li>\n<li>10 -> -1</li>\n<li>11 -> 0</li>\n<li>01 -> 1</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-13-lsm-rsm-booth-example4-8-csa-signed\">Lecture 13 (LSM, RSM, booth example(4, 8, CSA signed))<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-13-lsm-rsm-booth-example4-8-csa-signed\"></a></h1>\n<ul>\n<li>\n<p>LSM (a, b)</p>\n<ul>\n<li>find bits in ans</li>\n<li>\n<ol>\n<li>start with all 0</li>\n</ol>\n</li>\n<li>\n<ol start=\"2\">\n<li>ls</li>\n</ol>\n</li>\n<li>\n<ol start=\"3\">\n<li>add msb</li>\n</ol>\n</li>\n<li>repeat till lsb</li>\n<li>advantage\n<ul>\n<li>process become iterative</li>\n</ul>\n</li>\n<li>cost\n<ul>\n<li>shifter, ffs, adder, and gates, shifter(to find a single bit)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>RSM (a, b)</p>\n<ul>\n<li>find bits in ans + 1</li>\n<li>start with all 0</li>\n<li>rs</li>\n<li>add lsb on right side</li>\n<li>repeat and append carry in beginning</li>\n</ul>\n</li>\n<li>\n<p>radix 4 booth (signed a, b)</p>\n<ul>\n<li>window has overlap of 1 bit with previous window</li>\n<li>encode second operand(b)\n<ul>\n<li>find possible values of a needed (3, 2, 1, 0, -1, -2, -3)</li>\n</ul>\n</li>\n<li>find bits in ans\n<ul>\n<li>start with all 0</li>\n<li>4 booth => shift twice</li>\n<li>add a*msb(b_coded)</li>\n</ul>\n</li>\n<li>repeat</li>\n<li><strong><em>extension is alway sign extension</em></strong></li>\n</ul>\n</li>\n<li>\n<p>radix 8 (signed a, b)</p>\n<ul>\n<li>window has overlap of 1 bit</li>\n<li>same step as above</li>\n</ul>\n</li>\n<li>\n<p>radix with csa signed trick</p>\n</li>\n<li>\n<p>advantage of signed trick over sign extension</p>\n<ul>\n<li>reduce size of adder</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-14-baugh-wooley-multiplier--fixed-point-notation\">Lecture 14 (Baugh Wooley Multiplier &#x26; fixed point notation)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-14-baugh-wooley-multiplier--fixed-point-notation\"></a></h1>\n<ul>\n<li>\n<p>msb negative contributor, others positive</p>\n</li>\n<li>\n<p>take 2's complement of negative contributors and make vectors</p>\n</li>\n<li>\n<p>fill the vectors in empty rows</p>\n</li>\n<li>\n<p>combine 2's wherever possible</p>\n</li>\n<li>\n<p>fxp</p>\n<ul>\n<li>(bd, ad) -- d = decimal</li>\n<li>finding the resolution, largest and smallest numbers\n<ul>\n<li>singed and unsigned</li>\n<li>where to round off</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-15\">Lecture 15<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-15\"></a></h1>\n<ul>\n<li>Divide and Conquer Multiplier (unsigned)\n<ul>\n<li>triangle lines wala structure</li>\n<li>do simple group multiplication\n<ul>\n<li>combine rows wherever possible</li>\n</ul>\n</li>\n<li>steps #1\n<ul>\n<li>find multiplication of groups</li>\n<li>add using carry save adder\n<ul>\n<li>place items carefully</li>\n<li>add lsb of both number</li>\n<li>msb = lsb + bits req</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>steps #2\n<ul>\n<li>write everything directly</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>clk based carry-save adder\n<ul>\n<li>normally\n<ul>\n<li>100 clock cycles, T_cycle is function of no. of bits</li>\n</ul>\n</li>\n<li>with CSA\n<ul>\n<li>100 cycles, size does not impact only 1 FA delay</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Newton-Raphson Method (approximation)\n<ul>\n<li>x_(i+1) = x_i - f(x_i) / f'(x_i)</li>\n<li>to find 1/d\n<ul>\n<li>f(x) = D - 1/x\n<ul>\n<li>x_i+1 = x_i (2 - d.xi)</li>\n<li>division in converted to multilier(2) and sub(1)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>to find 1/root(some number)\n<ul>\n<li>figuring out the fxp req</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-16\">Lecture 16<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-16\"></a></h1>\n<ul>\n<li>\n<p>find root using some other equation</p>\n</li>\n<li>\n<p>what is a good function</p>\n</li>\n<li>\n<p>Cordic (circular)</p>\n<ul>\n<li>rotating a vector by <code>a</code>\n<ul>\n<li>x = xcosa - ysina</li>\n<li>y = xsina + ycosa</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>","noteIndex":{"id":"LBE6GBZjFtOaX27nwRSpq","title":"Notes 📚","desc":"","updated":1642916746120,"created":1642875904363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"f3ab1afac9d88a8f51c98f4e257b81a2","links":[],"anchors":{},"children":["H8OS9Ap2DDjZ7XSIZWpQT","m2fe4910vhlj3cwsbw45wfc","tpmpx2xkasjhbntai7ejfx3","ydBpHsjLwIGYomDZo8NtB","g9m1mlmymq7qvcjzi8ap2qu"],"parent":null,"data":{},"body":"\n![home](/assets/images/home.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"theme":"custom"},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://vinaykakkad.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Notes","description":"Notes"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"theme":"custom","searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}