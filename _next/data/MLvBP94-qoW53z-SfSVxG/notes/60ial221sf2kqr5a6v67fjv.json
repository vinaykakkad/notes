{"pageProps":{"note":{"id":"60ial221sf2kqr5a6v67fjv","title":"Intro","desc":"","updated":1671597930092,"created":1671597696289,"custom":{},"fname":"acads.sem-7.aca.intro","type":"note","vault":{"fsPath":"vault"},"contentHash":"865f2b7a59ca31d7ca9d06ee2f5ba71a","links":[],"anchors":{"lecture-0":{"type":"header","text":"Lecture 0","value":"lecture-0","line":30,"column":0,"depth":1},"moore-fsm":{"type":"header","text":"moore fsm","value":"moore-fsm","line":32,"column":0,"depth":2},"sequence-detector":{"type":"header","text":"sequence detector","value":"sequence-detector","line":40,"column":0,"depth":2},"lecture-2":{"type":"header","text":"Lecture 2","value":"lecture-2","line":51,"column":0,"depth":1},"arbiter":{"type":"header","text":"arbiter","value":"arbiter","line":53,"column":0,"depth":2},"steps":{"type":"header","text":"steps","value":"steps","line":62,"column":0,"depth":3},"hamming-code-1bit-error-correcting-code":{"type":"header","text":"hamming Code (1bit error correcting code)","value":"hamming-code-1bit-error-correcting-code","line":70,"column":0,"depth":2},"crc-cyclic-redundancy-check":{"type":"header","text":"CRC (cyclic redundancy check)","value":"crc-cyclic-redundancy-check","line":85,"column":0,"depth":2},"lecture-3":{"type":"header","text":"Lecture 3","value":"lecture-3","line":92,"column":0,"depth":1},"types-of-crc-implementation":{"type":"header","text":"Types of CRC implementation","value":"types-of-crc-implementation","line":96,"column":0,"depth":2},"combinational":{"type":"header","text":"Combinational","value":"combinational","line":98,"column":0,"depth":3},"iterative":{"type":"header","text":"Iterative","value":"iterative","line":113,"column":0,"depth":3},"rolled-version":{"type":"header","text":"Rolled Version","value":"rolled-version","line":119,"column":0,"depth":4},"unrolled-version":{"type":"header","text":"Unrolled Version","value":"unrolled-version","line":132,"column":0,"depth":4},"setup-time-in-flip-flops-for-iterative-versions":{"type":"header","text":"Setup Time in Flip-Flops (for iterative versions)","value":"setup-time-in-flip-flops-for-iterative-versions","line":147,"column":0,"depth":3},"lecture-4":{"type":"header","text":"Lecture 4","value":"lecture-4","line":165,"column":0,"depth":1},"lfsr-linear-feedback-shift-register":{"type":"header","text":"LFSR (linear feedback shift register)","value":"lfsr-linear-feedback-shift-register","line":167,"column":0,"depth":2},"standard-format":{"type":"header","text":"Standard Format","value":"standard-format","line":176,"column":0,"depth":3},"modular-format":{"type":"header","text":"Modular Format","value":"modular-format","line":196,"column":0,"depth":3},"differences":{"type":"header","text":"Differences","value":"differences","line":216,"column":0,"depth":4},"lfsr-based-crc":{"type":"header","text":"LFSR based CRC","value":"lfsr-based-crc","line":224,"column":0,"depth":3}},"children":[],"parent":"kvnu5kew5wvkwmka2si2ftc","data":{}},"body":"<h1 id=\"intro\">Intro<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#intro\"></a></h1>\n<ul>\n<li><a href=\"#lecture-0\">Lecture 0</a>\n<ul>\n<li><a href=\"#moore-fsm\">moore fsm</a></li>\n<li><a href=\"#sequence-detector\">sequence detector</a></li>\n</ul>\n</li>\n<li><a href=\"#lecture-2\">Lecture 2</a>\n<ul>\n<li><a href=\"#arbiter\">arbiter</a>\n<ul>\n<li><a href=\"#steps\">steps</a></li>\n</ul>\n</li>\n<li><a href=\"#hamming-code-1bit-error-correcting-code\">hamming Code (1bit error correcting code)</a></li>\n<li><a href=\"#crc-cyclic-redundancy-check\">CRC (cyclic redundancy check)</a></li>\n</ul>\n</li>\n<li><a href=\"#lecture-3\">Lecture 3</a>\n<ul>\n<li><a href=\"#types-of-crc-implementation\">Types of CRC implementation</a>\n<ul>\n<li><a href=\"#combinational\">Combinational</a></li>\n<li><a href=\"#iterative\">Iterative</a>\n<ul>\n<li><a href=\"#rolled-version\">Rolled Version</a></li>\n<li><a href=\"#unrolled-version\">Unrolled Version</a></li>\n</ul>\n</li>\n<li><a href=\"#setup-time-in-flip-flops-for-iterative-versions\">Setup Time in Flip-Flops (for iterative versions)</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#lecture-4\">Lecture 4</a>\n<ul>\n<li><a href=\"#lfsr-linear-feedback-shift-register\">LFSR (linear feedback shift register)</a>\n<ul>\n<li><a href=\"#standard-format\">Standard Format</a></li>\n<li><a href=\"#modular-format\">Modular Format</a>\n<ul>\n<li><a href=\"#differences\">Differences</a></li>\n</ul>\n</li>\n<li><a href=\"#lfsr-based-crc\">LFSR based CRC</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h1 id=\"lecture-0\">Lecture 0<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-0\"></a></h1>\n<h2 id=\"moore-fsm\">moore fsm<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#moore-fsm\"></a></h2>\n<p><img src=\"/notes/assets/images/2022-11-21-11-01-34.png\"></p>\n<ul>\n<li>it is a sequential circuit</li>\n<li>combinational circuit followed by flip-flops</li>\n<li><em>next state is a function of present state</em></li>\n</ul>\n<h2 id=\"sequence-detector\">sequence detector<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#sequence-detector\"></a></h2>\n<p><img src=\"/notes/assets/images/2022-11-21-11-15-18.png\"></p>\n<ul class=\"contains-task-list\">\n<li>use cases: <em>sender and receiver (CN)</em>, to check for some code(error code)</li>\n<li>steps:\n<ul>\n<li>start with reset(<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>S</mi><mn>0</mn></msub></mrow><annotation encoding=\"application/x-tex\">S_0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:-0.0576em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">0</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>)</li>\n<li>keep expanding leaves</li>\n<li>discard leaves whose pattern is not required and connect back</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>practice some random sequence detector</em></strong></li>\n</ul>\n<h1 id=\"lecture-2\">Lecture 2<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-2\"></a></h1>\n<h2 id=\"arbiter\">arbiter<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#arbiter\"></a></h2>\n<ul>\n<li>allocate access to shared resources</li>\n<li>consider a shared memory and 3 processes\n<ul>\n<li>input: [r1, r2, r3]</li>\n<li>output: [a1, a2, a3]</li>\n<li>arbiter gives ack to one of the process at a time</li>\n</ul>\n</li>\n<li>types: <strong>priority</strong> based, <strong>history</strong> based</li>\n</ul>\n<h3 id=\"steps\">steps<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#steps\"></a></h3>\n<ul class=\"contains-task-list\">\n<li>write list of states describing the current state of the system\n<ul>\n<li>used, waiting, not waiting</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <a href=\"https://drive.google.com/drive/u/1/folders/14yvGxRrt4DxzK01nqcRt2KcST_RHMpMS\">Arbiter Practice</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>write states for priority and history based</em></strong></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>write next states for some random states in both cases</em></strong></li>\n</ul>\n<h2 id=\"hamming-code-1bit-error-correcting-code\">hamming Code (1bit error correcting code)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hamming-code-1bit-error-correcting-code\"></a></h2>\n<ul class=\"contains-task-list\">\n<li>steps\n<ul>\n<li>sender\n<ol>\n<li>figure out the number of parity bits required (<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msup><mn>2</mn><mi>p</mi></msup><mo>≥</mo><mi>m</mi><mo>+</mo><mi>p</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">2^p \\geq m + p + 1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8004em;vertical-align:-0.136em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">p</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≥</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">p</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>)</li>\n<li>make the structure for the encoded message</li>\n<li>form groups and find the value of parity bits\n<ol>\n<li>parity bit = <code>xnor</code> of all message bits in its group</li>\n</ol>\n</li>\n</ol>\n</li>\n<li>receiver\n<ul>\n<li>write all groups with parity bit</li>\n<li>write 1 against group with even number of 1s</li>\n<li><strong><em>combined bits(in reverse) gives the position of the error</em></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <a href=\"https://drive.google.com/drive/u/1/folders/1OZRbEKXlzcwTNG6a1cZO0YHb-327ovGH\">Arbiter Practice</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <strong><em>practice 2 messages (with and without error)</em></strong></li>\n</ul>\n<h2 id=\"crc-cyclic-redundancy-check\">CRC (cyclic redundancy check)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#crc-cyclic-redundancy-check\"></a></h2>\n<ul>\n<li>divisor(generate) polynomial</li>\n<li>dividend(message) polynomial</li>\n<li><strong><em>Encoded message: for a k-bit divisor select (k-1) bit from remainder and append to the end of dividend</em></strong></li>\n<li>additionally, there is an look-up table to find the position of bit</li>\n</ul>\n<h1 id=\"lecture-3\">Lecture 3<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-3\"></a></h1>\n<ul>\n<li>sequential => involvement of clock</li>\n</ul>\n<h2 id=\"types-of-crc-implementation\">Types of CRC implementation<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#types-of-crc-implementation\"></a></h2>\n<h3 id=\"combinational\">Combinational<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#combinational\"></a></h3>\n<details>\n<summary>Diagram</summary>\n<p><img src=\"/notes/assets/images/2022-11-21-14-27-22.png\"></p>\n</details>\n<ul>\n<li>separate hardware for separate stages</li>\n<li>each continuously driving values from previous ones</li>\n<li>we will get output in single cycle\n<ul>\n<li>but the delay will be very large (delay of 8 <code>XOR</code> gates)</li>\n<li>might not be possible to connect with other components with large delay</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"iterative\">Iterative<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iterative\"></a></h3>\n<ul>\n<li>additional hardware is required\n<ul>\n<li>register to store the answer of previous stage</li>\n<li>hardware for counter(kmap or adder)</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"rolled-version\">Rolled Version<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rolled-version\"></a></h4>\n<details>\n<summary>Diagram</summary>\n<p><img src=\"/notes/assets/images/2022-11-21-14-27-59.png\"></p>\n</details>\n<ul>\n<li>time period is small / frequency is high</li>\n<li>less <code>XOR</code> gates are required</li>\n<li>we have to wait for 8 cycles to get an answer</li>\n</ul>\n<h4 id=\"unrolled-version\">Unrolled Version<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#unrolled-version\"></a></h4>\n<details>\n<summary>Diagram</summary>\n<p><img src=\"/notes/assets/images/2022-11-21-14-28-17.png\"></p>\n</details>  \n<ul>\n<li>pipelined version</li>\n<li>more <code>XOR</code> and flip-flops are required</li>\n<li>new input can be fed every cycle</li>\n<li>output is also obtained every cycle\n<ul>\n<li>initially -- we will have to weight for 8 cycles</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"setup-time-in-flip-flops-for-iterative-versions\">Setup Time in Flip-Flops (for iterative versions)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#setup-time-in-flip-flops-for-iterative-versions\"></a></h3>\n<details>\n<summary>Diagram</summary>\n<p><img src=\"/notes/assets/images/2022-11-21-14-28-43.png\"></p>\n</details>\n<ul class=\"contains-task-list\">\n<li>\n<p>setup delay is common and is required for every</p>\n<ul>\n<li>between rolled and combinational, combinational takes less time\n<ul>\n<li>combinational: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>c</mi><mi>l</mi><mi>k</mi><mi>q</mi></mrow></msub><mo>+</mo><mn>8</mn><mo>∗</mo><msub><mi>T</mi><mrow><mi>x</mi><mi>o</mi><mi>r</mi></mrow></msub><mo>+</mo><msub><mi>T</mi><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{clkq} + 8 * T_{xor} + T_{setup}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">or</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">se</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></span></li>\n<li>iterative: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>T</mi><mrow><mi>c</mi><mi>l</mi><mi>k</mi><mi>q</mi></mrow></msub><mo>+</mo><mn>8</mn><mo>∗</mo><msub><mi>T</mi><mrow><mi>x</mi><mi>o</mi><mi>r</mi></mrow></msub><mo>+</mo><mn>8</mn><mo>∗</mo><msub><mi>T</mi><mrow><mi>s</mi><mi>e</mi><mi>t</mi><mi>u</mi><mi>p</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">T_{clkq} + 8 * T_{xor} + 8 * T_{setup}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">c</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03148em;\">k</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.03588em;\">q</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.1514em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">x</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">or</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">8</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2806em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">se</span><span class=\"mord mathnormal mtight\">t</span><span class=\"mord mathnormal mtight\">u</span><span class=\"mord mathnormal mtight\">p</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span></span></span></span></span></li>\n</ul>\n</li>\n<li><strong><em>still rolled is preferred, as frequency of combinational is very large and can cause problem in connecting</em></strong></li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>practice a sum on CRC</em></strong></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>revise the names and comparison of 3 formats</em></strong></p>\n</li>\n</ul>\n<h1 id=\"lecture-4\">Lecture 4<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lecture-4\"></a></h1>\n<h2 id=\"lfsr-linear-feedback-shift-register\">LFSR (linear feedback shift register)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lfsr-linear-feedback-shift-register\"></a></h2>\n<ul>\n<li>\n<p>uses: <em>random number generator</em></p>\n</li>\n<li>\n<p>steps:</p>\n<ul>\n<li>from the generic circuit, create <code>polynomial</code> specific circuit</li>\n<li>0 => short, 1 => keep xor gate</li>\n</ul>\n</li>\n<li>\n<p>example: <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>+</mo><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><msup><mi>x</mi><mn>4</mn></msup><mo>+</mo><msup><mi>x</mi><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">1 + x^2 + x^3 + x^4 + x^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">4</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6644em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span></span></span></span></span></span></span></span></span></p>\n</li>\n</ul>\n<h3 id=\"standard-format\">Standard Format<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#standard-format\"></a></h3>\n<ul>\n<li>next state equation\n<ul>\n<li>shift every bit to right</li>\n<li>xor the ones with XOR gate before it</li>\n</ul>\n</li>\n</ul>\n<details>\n<summary>general</summary>\n<p><img src=\"/notes/assets/images/2022-11-21-23-12-07.png\"></p>\n</details>\n<details>\n<summary>converted for example</summary>\n<ul>\n<li><img src=\"/notes/assets/images/2022-11-21-19-36-11.png\"></li>\n</ul>\n</details>\n<h3 id=\"modular-format\">Modular Format<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#modular-format\"></a></h3>\n<ul>\n<li>next state equation\n<ul>\n<li>shift every bit to right</li>\n<li>for LSB: xor MSB with registers having XOR gates before them</li>\n</ul>\n</li>\n</ul>\n<details>\n<summary>general</summary>\n<ul>\n<li><img src=\"/notes/assets/images/2022-11-21-19-34-34.png\"></li>\n</ul>\n</details>\n<details>\n<summary>converted for example</summary>\n<p><img src=\"/notes/assets/images/2022-11-21-23-14-29.png\"></p>\n</details>\n<h4 id=\"differences\">Differences<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#differences\"></a></h4>\n<ul>\n<li>looking at the structures:</li>\n<li>in modular format, maximum delay is 1 <code>XOR</code> only</li>\n<li>in standard format, this delay can be larger(more than 1 <code>XOR</code>)</li>\n</ul>\n<blockquote style=\"background-color: #43b02a20; padding:3px 2px; border-radius: 5px; border-left: 0.25em solid #43b02a; padding-left: 0.75em\">non-zero seed would not work</blockquote>\n<h3 id=\"lfsr-based-crc\">LFSR based CRC<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lfsr-based-crc\"></a></h3>\n<details>\n<summary>structure</summary>\n<p><img src=\"/notes/assets/images/2022-11-22-00-05-36.png\"></p>\n</details>\n<details>\n<summary>example</summary>\n<p><img src=\"/notes/assets/images/2022-11-22-00-05-04.png\"></p>\n</details>\n<ul class=\"contains-task-list\">\n<li>\n<p>one additional <code>XOR</code> gate at the input</p>\n</li>\n<li>\n<p>steps</p>\n<ul>\n<li>LFSR is initialized to all zeros</li>\n<li>We keep passing a single bit, starting from the MSB of <code>msg</code> + <code>0_padded</code></li>\n<li>we update the LFSR values based on the equation(created using generate polynomial)</li>\n</ul>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>derive specific circuit from general</em></strong></p>\n</li>\n<li class=\"task-list-item\">\n<p><input type=\"checkbox\" disabled> <strong><em>derive equations and work out LFSR CRC</em></strong></p>\n</li>\n</ul>","noteIndex":{"id":"LBE6GBZjFtOaX27nwRSpq","title":"Notes 📚","desc":"","updated":1642916746120,"created":1642875904363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"f3ab1afac9d88a8f51c98f4e257b81a2","links":[],"anchors":{},"children":["H8OS9Ap2DDjZ7XSIZWpQT","m2fe4910vhlj3cwsbw45wfc","tpmpx2xkasjhbntai7ejfx3","ydBpHsjLwIGYomDZo8NtB","g9m1mlmymq7qvcjzi8ap2qu"],"parent":null,"data":{},"body":"\n![home](/assets/images/home.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"theme":"custom"},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://vinaykakkad.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Notes","description":"Notes"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"theme":"custom","searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}