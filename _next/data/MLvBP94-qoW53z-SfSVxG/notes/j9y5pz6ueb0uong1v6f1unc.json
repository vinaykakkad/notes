{"pageProps":{"note":{"id":"j9y5pz6ueb0uong1v6f1unc","title":"Var Let Const","desc":"","updated":1696333457934,"created":1666015367380,"custom":{},"fname":"dev.js.var-let-const","type":"note","vault":{"fsPath":"vault"},"contentHash":"3ffe6b7c57ef68acdbc0cba8a55094ce","links":[],"anchors":{"lexical-environment-and-scope":{"type":"header","text":"Lexical environment and scope","value":"lexical-environment-and-scope","line":8,"column":0,"depth":1},"scope":{"type":"header","text":"Scope","value":"scope","line":16,"column":0,"depth":2},"shortest-js-code":{"type":"header","text":"Shortest JS code","value":"shortest-js-code","line":20,"column":0,"depth":1},"let-and-const":{"type":"header","text":"Let and Const","value":"let-and-const","line":28,"column":0,"depth":1},"re-declaration-vs-re-initialization":{"type":"header","text":"Re-declaration vs re-initialization","value":"re-declaration-vs-re-initialization","line":40,"column":0,"depth":2},"errors":{"type":"header","text":"Errors","value":"errors","line":46,"column":0,"depth":2},"block-scope":{"type":"header","text":"Block Scope","value":"block-scope","line":53,"column":0,"depth":1},"shadowing":{"type":"header","text":"Shadowing","value":"shadowing","line":64,"column":0,"depth":2},"illegal-shadowing":{"type":"header","text":"Illegal Shadowing","value":"illegal-shadowing","line":74,"column":0,"depth":3}},"children":[],"parent":"28qngwsk8m7bvqg9s7bz7f7","data":{}},"body":"<h1 id=\"var-let-const\">Var Let Const<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#var-let-const\"></a></h1>\n<h1 id=\"lexical-environment-and-scope\">Lexical environment and scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#lexical-environment-and-scope\"></a></h1>\n<ul>\n<li>memory space of the current execution context + LE of parent</li>\n<li>recursive expansion (LE of parent -> LE of parent of parent ) is <code>scope chain</code>\n<ul>\n<li>recursively we reach the global</li>\n<li><strong>*parent of global is none**</strong></li>\n<li><strong><em>LE of some parent function is stored as closure</em></strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"scope\">Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scope\"></a></h2>\n<ul>\n<li>part of which can access a variable is scope of variable</li>\n</ul>\n<h1 id=\"shortest-js-code\">Shortest JS code<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#shortest-js-code\"></a></h1>\n<ul>\n<li>even when we don't have anything in our code, JS engines creates a global object\n<ul>\n<li>window in case of browsers</li>\n<li>and in the global context <code>this</code> variables refers to the global object</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/notes/assets/images/2022-10-17-20-30-44.png\"></p>\n<h1 id=\"let-and-const\">Let and Const<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#let-and-const\"></a></h1>\n<ul>\n<li>memory is assigned before execution to every variable(var, let, const)</li>\n<li>but in case of <code>let</code> and <code>const</code> memory is not allocated in the global space\n<ul>\n<li>it is allocated in something, that is known as the <code>temporal dead zone</code></li>\n<li><strong><em>therefore we cannot access let and const variable without initialization</em></strong></li>\n<li><strong><em>it will give us an reference error</em></strong></li>\n<li>return values for:\n<ul>\n<li>var without initialization: <code>undefined</code></li>\n<li>let, const without initialization: <code>reference error</code></li>\n<li>any variable without declaration: <code>reference error</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"re-declaration-vs-re-initialization\">Re-declaration vs re-initialization<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#re-declaration-vs-re-initialization\"></a></h2>\n<ul>\n<li>only var can be re-declared in the same scope</li>\n<li>var and let can be re-initialized, const cannot be</li>\n<li>const cannot be declared without initialization</li>\n</ul>\n<h2 id=\"errors\">Errors<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#errors\"></a></h2>\n<ul>\n<li>syntax error: when we re-declare some variable\n<ul>\n<li>or when we declare const without initialization</li>\n</ul>\n</li>\n<li>type error: when we re-initialize cost</li>\n<li>reference error: when we access something that is not in the current memory space (TDZ or un-declared)</li>\n</ul>\n<h1 id=\"block-scope\">Block Scope<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#block-scope\"></a></h1>\n<ul>\n<li>block or compound statement\n<ul>\n<li>group of statement surrounded within curly braces</li>\n</ul>\n</li>\n<li>block scoped variables\n<ul>\n<li><code>let</code> and <code>const</code> are block scoped variables\n<ul>\n<li>i.e. if they are defined within a block, they won't be accessible outside it\n<ul>\n<li><strong><em>will throw reference error(not defined)</em></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<blockquote style=\"background-color: #43b02a20; padding:3px 2px; border-radius: 5px; border-left: 0.25em solid #43b02a; padding-left: 0.75em\">- let and const are block scoped => their memory allocation will happen in the nearest block memory space<br>- var is function scoped=> its memory allocation will happen in the nearest function memory space</blockquote>\n<h2 id=\"shadowing\">Shadowing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#shadowing\"></a></h2>\n<ul>\n<li>shadowing is when a globally declared variable is used / declared inside a block scope\n<ul>\n<li>for <code>var</code>\n<ul>\n<li>as it is not block scope, the new variable refers to the same memory address</li>\n<li><strong><em><code>var</code> is function scope</em></strong></li>\n</ul>\n</li>\n<li>for <code>let</code> and <code>const</code>\n<ul>\n<li>the are block scoped variables</li>\n<li>memory is allocated in a separate memory space (block)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"illegal-shadowing\">Illegal Shadowing<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#illegal-shadowing\"></a></h3>\n<ul>\n<li>when a <code>let</code> or <code>const</code> variable is declared in global scope and we try to declare a <code>var</code> variable inside a block\n<ul>\n<li>it will throw an syntax error due to <code>illegal-shadowing</code></li>\n</ul>\n</li>\n</ul>\n<p><img src=\"/notes/assets/images/2023-10-03-17-13-44.png\"></p>","noteIndex":{"id":"LBE6GBZjFtOaX27nwRSpq","title":"Notes ðŸ“š","desc":"","updated":1642916746120,"created":1642875904363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"f3ab1afac9d88a8f51c98f4e257b81a2","links":[],"anchors":{},"children":["H8OS9Ap2DDjZ7XSIZWpQT","m2fe4910vhlj3cwsbw45wfc","tpmpx2xkasjhbntai7ejfx3","ydBpHsjLwIGYomDZo8NtB","g9m1mlmymq7qvcjzi8ap2qu"],"parent":null,"data":{},"body":"\n![home](/assets/images/home.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"theme":"custom"},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://vinaykakkad.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Notes","description":"Notes"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"theme":"custom","searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}