{"pageProps":{"note":{"id":"ztnm6bj51bu4saqs0m9lg4j","title":"Generators","desc":"","updated":1673326092823,"created":1673322981537,"custom":{},"fname":"capture.dev.python.functional-programming.generators","type":"note","vault":{"fsPath":"vault"},"contentHash":"cedd9228b7b7479ba7c14d6322bcc6b5","links":[{"from":{"fname":"capture.dev.python.functional-programming.asynchrnous-programming","id":"9iyitjbahuhp1l0cy75kxvv","vaultName":"vault"},"type":"backlink","position":{"start":{"line":29,"column":3,"offset":871},"end":{"line":29,"column":59,"offset":927},"indent":[]},"value":"capture.dev.python.functional-programming.generators"}],"anchors":{"what-is-a-generator":{"type":"header","text":"What is a generator?","value":"what-is-a-generator","line":7,"column":0,"depth":1},"exampleuse-case":{"type":"header","text":"Example(use case)","value":"exampleuse-case","line":16,"column":0,"depth":1},"the-non-efficient-way":{"type":"header","text":"The non-efficient way","value":"the-non-efficient-way","line":20,"column":0,"depth":2},"efficient-custom-iterator-way":{"type":"header","text":"Efficient Custom Iterator way","value":"efficient-custom-iterator-way","line":38,"column":0,"depth":2},"efficient-generator-way":{"type":"header","text":"Efficient Generator Way","value":"efficient-generator-way","line":68,"column":0,"depth":2},"understanding-generator":{"type":"header","text":"Understanding Generator","value":"understanding-generator","line":80,"column":0,"depth":1},"understanding-the-yield-statement":{"type":"header","text":"Understanding the yield statement","value":"understanding-the-yield-statement","line":86,"column":0,"depth":2},"tradeoffs-memory-vs-speed":{"type":"header","text":"Tradeoffs (memory vs speed)","value":"tradeoffs-memory-vs-speed","line":116,"column":0,"depth":1},"further-reading":{"type":"header","text":"Further Reading","value":"further-reading","line":121,"column":0,"depth":1}},"children":[],"parent":"xrw9257ex1h94sfvwweuywe","data":{}},"body":"<h1 id=\"generators\">Generators<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#generators\"></a></h1>\n<h1 id=\"what-is-a-generator\">What is a generator?<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#what-is-a-generator\"></a></h1>\n<ol>\n<li>generator is a function:\n<ul>\n<li>that returns an object when you call <code>next()</code>\n<ul>\n<li>stores the state between multiple <code>next()</code> executions</li>\n<li><code>next()</code> can be called until we encounter a <code>StopIteration</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>generator is a function:\n<ul>\n<li>that behaves like an <code>iterator</code></li>\n</ul>\n</li>\n</ol>\n<h1 id=\"exampleuse-case\">Example(use case)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#exampleuse-case\"></a></h1>\n<ul>\n<li>we write a program that makes a list of first</li>\n</ul>\n<h2 id=\"the-non-efficient-way\">The non-efficient way<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-non-efficient-way\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">first_n</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">'''Build and return a list'''</span>\n    num<span class=\"token punctuation\">,</span> nums <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">while</span> num <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">:</span>\n        nums<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span>\n        num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n    <span class=\"token keyword\">return</span> nums\n   \n   \nsum_of_first_n <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>first_n<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>this will create the entire list in memory\n<ul>\n<li><strong><em>would be very bad if we something other than integer(ex: file)</em></strong></li>\n</ul>\n</li>\n</ul>\n<h2 id=\"efficient-custom-iterator-way\">Efficient Custom Iterator way<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#efficient-custom-iterator-way\"></a></h2>\n<ul>\n<li>adding the <code>__iter__</code> and <code>__next__</code> methods</li>\n<li>sum will now take values using the <code>next()</code></li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">first_n</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n\n        self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__iter__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> self\n\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">&#x3C;</span> self<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">:</span>\n            cur<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>num<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>num<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n            <span class=\"token keyword\">return</span> cur\n        <span class=\"token keyword\">raise</span> StopIteration<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\nsum_of_first_n <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>first_n<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<ul>\n<li>this is memory efficient, but there is still a lot of boilerplate code</li>\n</ul>\n<h2 id=\"efficient-generator-way\">Efficient Generator Way<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#efficient-generator-way\"></a></h2>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">firstn</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    num <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n    <span class=\"token keyword\">while</span> num <span class=\"token operator\">&#x3C;</span> n<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">yield</span> num\n        num <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\nsum_of_first_n <span class=\"token operator\">=</span> <span class=\"token builtin\">sum</span><span class=\"token punctuation\">(</span>firstn<span class=\"token punctuation\">(</span><span class=\"token number\">1000000</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n</code></pre>\n<h1 id=\"understanding-generator\">Understanding Generator<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#understanding-generator\"></a></h1>\n<ul>\n<li>generator looks like a normal function, except for the <code>yield</code> statement\n<ul>\n<li><code>yield</code> sends the value back to the caller like return, <strong><em>but the function</em></strong> is not exited yet</li>\n<li>the <strong>state</strong> of the function is stored until the next <code>next()</code> function call (implicitly using <code>for</code> or explicitly using <code>next()</code>)</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"understanding-the-yield-statement\">Understanding the <code>yield</code> statement<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#understanding-the-yield-statement\"></a></h2>\n<ul>\n<li>the <code>next()</code> call on a generator object triggers the execution of function until a <code>yield</code> statement is encountered\n<ul>\n<li>on encountering <code>yield</code> the value is returned and that <strong>state</strong> is saved</li>\n<li>this includes\n<ul>\n<li>any local variables</li>\n<li>instruction pointer</li>\n<li>internal stack</li>\n<li>exception handling</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>the next <code>next()</code> continues the execution of function right below the <code>yield statement</code>\n<ul>\n<li>if there is no next yield in the function, a <code>StopIteration</code> error would be thrown</li>\n</ul>\n</li>\n</ul>\n<pre class=\"language-python\"><code class=\"language-python\"><span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">def</span> <span class=\"token function\">multi_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     yield_str <span class=\"token operator\">=</span> <span class=\"token string\">\"This will print the first string\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> yield_str\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     yield_str <span class=\"token operator\">=</span> <span class=\"token string\">\"This will print the second string\"</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>     <span class=\"token keyword\">yield</span> yield_str\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> multi_obj <span class=\"token operator\">=</span> multi_yield<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>multi_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nThis will <span class=\"token keyword\">print</span> the first string\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>multi_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nThis will <span class=\"token keyword\">print</span> the second string\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>multi_obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\nTraceback <span class=\"token punctuation\">(</span>most recent call last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n  File <span class=\"token string\">\"&#x3C;stdin>\"</span><span class=\"token punctuation\">,</span> line <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">in</span> <span class=\"token operator\">&#x3C;</span>module<span class=\"token operator\">></span>\nStopIteration\n</code></pre>\n<h1 id=\"tradeoffs-memory-vs-speed\">Tradeoffs (memory vs speed)<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tradeoffs-memory-vs-speed\"></a></h1>\n<ul>\n<li>generators are memory efficient but can be slow</li>\n<li><a href=\"https://realpython.com/introduction-to-python-generators/#profiling-generator-performance\">generator vs list comprehension -- profiling</a></li>\n</ul>\n<h1 id=\"further-reading\">Further Reading<a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#further-reading\"></a></h1>\n<ul class=\"contains-task-list\">\n<li><a href=\"https://realpython.com/introduction-to-python-generators/#profiling-generator-performance\">real python article</a></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> advanced generator methods\n<ul class=\"contains-task-list\">\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>.send()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>.throw()</code></li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> <code>.close()</code></li>\n</ul>\n</li>\n<li class=\"task-list-item\"><input type=\"checkbox\" disabled> use (data pipeline)</li>\n</ul>\n<hr>\n<strong>Backlinks</strong>\n<ul>\n<li><a href=\"/notes/notes/9iyitjbahuhp1l0cy75kxvv\">Asynchrnous Programming</a></li>\n</ul>","noteIndex":{"id":"LBE6GBZjFtOaX27nwRSpq","title":"Notes 📚","desc":"","updated":1642916746120,"created":1642875904363,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"f3ab1afac9d88a8f51c98f4e257b81a2","links":[],"anchors":{},"children":["H8OS9Ap2DDjZ7XSIZWpQT","m2fe4910vhlj3cwsbw45wfc","tpmpx2xkasjhbntai7ejfx3","ydBpHsjLwIGYomDZo8NtB","g9m1mlmymq7qvcjzi8ap2qu"],"parent":null,"data":{},"body":"\n![home](/assets/images/home.png)\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"fuzzThreshold":0.2,"vaultSelectionModeOnCreate":"smart"}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":true,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.83.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false,"templateHierarchy":"template"},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false,"theme":"custom"},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/notes","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://vinaykakkad.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"Notes","description":"Notes"},"github":{"enableEditLink":true,"editLinkText":"Edit this page on GitHub","editBranch":"main","editViewMode":"tree"},"enablePrettyLinks":true,"enableTaskNotes":true,"theme":"custom","searchMode":"lookup","siteFaviconPath":"favicon.ico","siteIndex":"root"}}},"__N_SSG":true}